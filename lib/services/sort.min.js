import { st } from "../models/types.js";
export const heapify = (t, s, o, e = st.ASC) => {
  let r = o;
  const f = 2 * o + 1,
    C = 2 * o + 2;
  if (
    (f < s &&
      ((e === st.ASC && t[f] > t[r]) || (e === st.DESC && t[f] < t[r])) &&
      (r = f),
    C < s &&
      ((e === st.ASC && t[C] > t[r]) || (e === st.DESC && t[C] < t[r])) &&
      (r = C),
    r !== o)
  ) {
    const f = t[o];
    (t[o] = t[r]), (t[r] = f), heapify(t, s, r, e);
  }
};
export const merge = (t, s, o, e, r = st.ASC) => {
  const f = o - s + 1,
    C = e - o,
    S = new Array(f),
    n = new Array(C);
  for (let o = 0; o < f; o++) S[o] = t[s + o];
  for (let s = 0; s < C; s++) n[s] = t[o + 1 + s];
  let A = 0,
    p = 0,
    c = s;
  for (; A < f && p < C; )
    (r === st.ASC && S[A] <= n[p]) || (r === st.DESC && S[A] >= n[p])
      ? ((t[c] = S[A]), A++)
      : ((t[c] = n[p]), p++),
      c++;
  for (; A < f; ) (t[c] = S[A]), A++, c++;
  for (; p < C; ) (t[c] = n[p]), p++, c++;
};
